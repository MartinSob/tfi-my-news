@using BusinessEntity;
@using Security;
@model BusinessEntity.User
@{
	List<Role> allRoles = new PolicyBl().getRoles();
	int i = 1;
}

<div class="container.is-widescreen my-5">
	<div class="columns">
		<div class="column px-5">
			<h1 class="title is-2">@(((Dictionary<string,string>)Session["texts"])["password_reset"]) </h1>

			<form id="updateForm">
				<div class="field">
					<label class="label">@(((Dictionary<string,string>)Session["texts"])["password"])</label>
					<div class="control">
						<input id="password" class="input" type="password" placeholder="@(((Dictionary<string,string>)Session["texts"])["password"])" required>
					</div>
				</div>

				<div class="field">
					<label class="label">@(((Dictionary<string,string>)Session["texts"])["confirm_password"])</label>
					<div class="control">
						<input id="confirmPassword" class="input" type="password" placeholder="@(((Dictionary<string,string>)Session["texts"])["confirm_password"])" required>
					</div>
				</div>

				<div class="py-4">
					<button type="submit" class="button is-success"><i class="fas fa-check"></i></button>
					<a href="~/User/View/@Model.id" class="button is-danger is-outlined">@(((Dictionary<string,string>)Session["texts"])["cancel"])</a>
				</div>
			</form>
		</div>
	</div>

	<script>
		document.getElementById("updateForm").addEventListener("submit", async (event) => {
			event.preventDefault();
			const password = document.getElementById("password").value;
			const confirmPassword = document.getElementById("confirmPassword").value;

			if (password != confirmPassword) {
				showAlert({
					type: 'danger',
					description: '@(((Dictionary<string,string>)Session["texts"])["password_different"])'
				})
				return;
			}

			const response = await post('/User/ChangePassword', {
				id: @Model.id,
				newPassword: password,
			});

			if (response.type == 'success') {
				window.location.replace("/User/View/@Model.id");
			}

			showAlert(response);
		});
	</script>
</div>