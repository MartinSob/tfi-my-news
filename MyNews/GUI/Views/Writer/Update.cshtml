@using BusinessEntity;
@using BusinessLogic;
@using Security;
@model BusinessEntity.Post
@{
	int i = 1;
	Employee e;
	List<Tag> allTags = new TagBl().get();
}

<div class="container.is-widescreen my-5">
	<div class="columns">
		<div class="column px-5">
			<h1 class="title is-2">@Model.title</h1>

			<form id="updateForm">
				<div class="field">
					<label class="label">@(((Dictionary<string,string>)Session["texts"])["title"])</label>
					<div class="control">
						<input id="title" class="input" type="text" value="@Model.title" required>
					</div>
				</div>

				@if (new PolicyBl().hasPermission((User)Session["user"], "admin_post")) {
					<div class="field">
						<label class="label">@(((Dictionary<string, string>)Session["texts"])["writer"])</label>
						<div class="control">
							<input class="input" type="text" value="@((e = new EmployeeBl().get(Model.employee.employeeId)).lastname), @(e.name)" disabled>
						</div>
					</div>
				}

				<div class="field">
					<label class="label">@(((Dictionary<string, string>)Session["texts"])["image"])</label>
					@if (Model.image != null) {
						<div id="hasImage">
							<img src="@Model.image" width="150" height="150">
							<button onclick="removeImage()" class="button is-danger is-outlined"><i class="fas fa-trash-alt"></i></button>
						</div>
					}
					<div class="control">
						@if (Model.image != null) {
							<input class="input" type="file" id="myFile" name="filename" value="@Model.image" accept="image/*">
						} else { 
							<input class="input" type="file" id="myFile" name="filename" accept="image/*">
						}
					</div>
				</div>

				<div class="field">
					<label class="label">@(((Dictionary<string,string>)Session["texts"])["body"])</label>
					<div class="control">
						<textarea id="body" class="textarea" required>@Model.body</textarea>
					</div>
				</div>

				<div class="field">
					<label class="label">@(((Dictionary<string,string>)Session["texts"])["date"])</label>
					<div class="control">
						<input class="input" type="date" value="@Model.date.ToString("yyyy-MM-d")" disabled>
					</div>
				</div>

				<label class="label">@(((Dictionary<string,string>)Session["texts"])["tags"])</label>
				<div class="scrollable-table">
					<table class="table is-striped is-hoverable" style="width: 100%">
						<thead>
							<tr>
								<th></th>
								<th>@(((Dictionary<string,string>)Session["texts"])["name"])</th>
								<th>@(((Dictionary<string,string>)Session["texts"])["color"])</th>
							</tr>
						</thead>
						<tbody>
							@foreach (Tag tag in allTags) {
								<tr>
									<td>
										<label class="checkbox">
											@if (Model.tags.Any(p => p.id == tag.id)) {
												<input id="@tag.id" type="checkbox" name="tagboxes" checked>
											} else {
												<input id="@tag.id" type="checkbox" name="tagboxes">
											}
										</label>
									</td>
									<td>@tag.name</td>
									<td><div class="tag round-tag" style="background-color: @tag.color"></div></td>
								</tr>
							}
						</tbody>
					</table>
				</div>

				<div class="py-4">
					<button id="saveBtn" type="submit" class="button is-success"><i class="fas fa-check"></i></button>
					<a href="~/Writer" class="button is-danger is-outlined">@(((Dictionary<string,string>)Session["texts"])["cancel"])</a>
				</div>
			</form>
		</div>
	</div>

	<div class="modal">
		<div class="modal-background"></div>
		<div class="modal-card">
			<header class="modal-card-head">
				<p class="modal-card-title"><i class="fas fa-spell-check"></i> @(((Dictionary<string,string>)Session["texts"])["validation"])</p>
				<button onclick="toggleModal()" class="delete" aria-label="close"></button>
			</header>
			<section class="modal-card-body">
				<div class="columns">
					<div class="column" style="display: flex; justify-content: center;">
						<div id="pb" class="round-progress-bar"></div>
					</div>
					<div class="column">
						<ul id="recommendationList"></ul>
					</div>
				</div>
			</section>
			<footer class="modal-card-foot">
				<button onclick="updatePost()" class="button"><i class="fas fa-check"></i></button>
			</footer>
		</div>
	</div>

	<script>
		let tagsSelected = [];

		document.getElementById("updateForm").addEventListener("submit", async (event) => {
			event.preventDefault();

			tagsSelected = [];
			const checkedBoxes = document.querySelectorAll('input[name=tagboxes]:checked');

			checkedBoxes.forEach(box => {
				if (box.checked) {
					tagsSelected.push(box.id);
				}
			})

			if (tagsSelected.length == 0) {
				return showAlert({
					type: 'danger',
					description: '@(((Dictionary<string,string>)Session["texts"])["complete_data"])'
				});
			}

			const array = document.getElementById("myFile").value.split('.');
			if (!["jpg", "png", "jpeg"].includes(array[array.length - 1]) && !document.getElementById("hasImage")) {
				return showAlert({
					type: 'danger',
					description: '@(((Dictionary<string,string>)Session["texts"])["invalid_file_format"])'
				});
			}

			showValidationModal();
		});

		async function showValidationModal() {
			const divGraph = document.getElementById("pb");
			divGraph.innerHTML = "";

			const response = await post('/Writer/GetProbability', {
				title: document.getElementById("title").value,
				body: document.getElementById("body").value,
				tags: tagsSelected
			});

			const ul = document.getElementById("recommendationList");
			ul.innerHTML = "";
			response.data.recommendations.forEach(reco => {
				const li = document.createElement("li");

				let logo = document.createElement("i");
				if (reco.value == 'error') {
					logo.classList.add("fas", "fa-exclamation-circle", "has-text-danger");
				} else {
					logo.classList.add("fas", "fa-check", "has-text-success");
				}

				li.appendChild(logo);
				li.appendChild(document.createTextNode("  " + reco.item));
				ul.appendChild(li);
			})

			divGraph.dataset.percent = response.data.value;
			drawRoundProgressBar(divGraph)
			toggleModal();
		}

		async function updatePost() {
			let image = {};

			if (document.getElementById("hasImage")) {
				image = document.getElementById("myFile").value;
			} else {
				const file = document.getElementById("myFile").files[0];
				image = await getBase64(file);
			}

			const response = await post('/Writer/UpdatePost', {
				id: @Model.id,
				title: document.getElementById("title").value,
				body: document.getElementById("body").value,
				tags: tagsSelected,
				image: image
			});

			if (response.type == 'success') {
				window.location.replace("/Writer");
			}

			showAlert(response);
		}

		function removeImage() {
			document.getElementById("myFile").value = null;
			document.getElementById("hasImage").remove();
		}
	</script>
</div>