@using BusinessEntity;
@using BusinessLogic;
@using Security;
@model BusinessEntity.UserView
@{
	Employee employee = new EmployeeBl().get(Model.post.employee.employeeId);
}

<div class="container.is-widescreen my-5">
	<div class="columns">
		<div class="column is-9 px-5">
			<div class="post-body">
				@if (@Model.post.image != null) {
					<div class="card-image" style="text-align: center;">
						<img src="@Model.post.image">
					</div>
				}

				<h1 class="title is-2 mt-2">
					@Model.post.title
				</h1>

				@foreach (Tag tag in Model.post.tags) {
					<div class="tag square-tag" style="border-left-color: @tag.color">@tag.name</div>
				}

				<p>
					@Model.post.body
				</p>

				<div class="like-button-container">
					<label class="like-button">
						@if (Model.qualification > 0) {
							<input id="likeBtn" type="checkbox" hidden checked><span><i class="fas fa-thumbs-up"></i></span>
						} else {
							<input id="likeBtn" type="checkbox" hidden><span><i class="far fa-thumbs-up"></i></span>
						}
					</label>
					<label class="like-button">
						@if (Model.qualification < 0) {
							<input id="dislikeBtn" type="checkbox" hidden checked><span><i class="fas fa-thumbs-down"></i></span>
						} else {
							<input id="dislikeBtn" type="checkbox" hidden><span><i class="far fa-thumbs-down"></i></span>
						}
					</label>
				</div>
			</div>
		</div>

		<div class="column is-3 px-5">
			<div class="post-body">
				<h1 class="title is-4">
					<i class="fas fa-i-cursor"></i> @(((Dictionary<string,string>)Session["texts"])["writer"])
				</h1>
				<a class="mt-2" href="/Employee/View/@employee.employeeId">@employee.lastname, @employee.name</a>
			</div>
		</div>
	</div>

	<script>
		var hasVScroll = document.documentElement.scrollHeight > document.documentElement.clientHeight;

		document.getElementById("likeBtn").addEventListener('change', async (event) => {
			document.getElementById("dislikeBtn").checked = false;
			let qualification = 0;
			if (event.currentTarget.checked) {
				qualification = 1;
			}

			const result = await get('/Home/QualifyPost?id=' + @Model.post.id +'&qualification=' + qualification);
		})

		document.getElementById("dislikeBtn").addEventListener('change', async (event) => {
			document.getElementById("likeBtn").checked = false;
			let qualification = 0;
			if (event.currentTarget.checked) {
				qualification = -1;
			}

			const result = get('/Home/QualifyPost?id=' + @Model.post.id +'&qualification=' + qualification);
		})

		window.onscroll = async function () {
			const d = document.documentElement;
			const offset = d.scrollTop + window.innerHeight;
			const height = d.offsetHeight;

			if (offset >= height) {
				const result = await get('/Home/ReadPost?id=' + @Model.post.id);
			}
		};

		if (!hasVScroll) {
			setTimeout(async function () {
				const result = await get('/Home/ReadPost?id=' + @Model.post.id);
			}, 10000);
		}
	</script>
</div>
