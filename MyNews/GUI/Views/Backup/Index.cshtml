@using BusinessEntity;
@using Security;
@using MyNews.Models;
@model ListModel<BusinessEntity.Backup>
@{
	int i = 1;
}

<div class="container.is-widescreen my-5">
	<div class="columns">

		@if (new PolicyBl().hasPermission((User)Session["user"], "backup_manage")) {
			<div class="column px-5">
				<h1 class="title is-2"><i class="fas fa-archive"></i> @(((Dictionary<string,string>)Session["texts"])["backup"])</h1>
				<p>@(((Dictionary<string,string>)Session["texts"])["backup_description"])</p>
				<button id="backupBtn" class="button is-success my-4">@(((Dictionary<string,string>)Session["texts"])["create"])</button>
			</div>
		}

		@if (new PolicyBl().hasPermission((User)Session["user"], "restore_manage")) {
			<div class="column left-divider px-5">
				<h1 class="title is-2"><i class="fas fa-box-open"></i> @(((Dictionary<string,string>)Session["texts"])["restore"])</h1>
				<p>@(((Dictionary<string,string>)Session["texts"])["restore_description"])</p>

				<table class="table is-striped is-hoverable">
					<thead>
						<tr>
							<th></th>
							<th>#</th>
							<th>@(((Dictionary<string,string>)Session["texts"])["name"])</th>
							<th>@(((Dictionary<string,string>)Session["texts"])["date"])</th>
						</tr>
					</thead>
					<tbody>
						@foreach (Backup bkp in Model.Items) {
							<tr>
								<td>
									<label class="radio"><input type="radio" id="@bkp.name" name="restore-item"></label>
								</td>
								<td>@(i++)</td>
								<td>@bkp.name</td>
								<td>@bkp.date</td>
							</tr>
						}
					</tbody>
				</table>

				<button id="restoreBtn" class="button is-success my-4">@(((Dictionary<string,string>)Session["texts"])["create"])</button>
			</div>
		}

		<div class="column left-divider px-5">
			<h1 class="title is-2"><i class="fas fa-bug"></i> @(((Dictionary<string,string>)Session["texts"])["vd"])</h1>
			<p>@(((Dictionary<string,string>)Session["texts"])["vd_description"])</p>

			<div id="dvResponse" class="dv-error is-hidden">
				<p class="title is-3 mb-0">❌ @(((Dictionary<string,string>)Session["texts"])["errors"])</p>

				<table class="table is-striped is-hoverable">
					<thead>
						<tr>
							<th>#</th>
							<th>@(((Dictionary<string,string>)Session["texts"])["description"])</th>
						</tr>
					</thead>
					<tbody id="dvErrors"></tbody>
				</table>
			</div>

			<button id="validateDvBtn" class="button is-success my-4">@(((Dictionary<string,string>)Session["texts"])["validate"])</button>
			@if (new PolicyBl().hasPermission((User)Session["user"], "dv_update")) {
			<button id="updateDvBtn" class="button is-success my-4">@(((Dictionary<string,string>)Session["texts"])["update"])</button>
			}
		</div>
	</div>
</div>

<script>
	document.getElementById("backupBtn").addEventListener("click", async () => {
		const response = await get('/Backup/CreateBackup');
		showAlert(response);
		if (response.data == 'DV') {
			document.getElementById("validateDvBtn").click();
		}
	});

	document.getElementById("restoreBtn").addEventListener("click", async () => {
		const restoreName = document.querySelector('input[name="restore-item"]:checked').id;
		const response = await get('/Backup/CreateRestore?name=' + restoreName);
		showAlert(response);
	});

	document.getElementById("validateDvBtn").addEventListener("click", async () => {
		resetDvTable();
		const response = await get('/Backup/ValidateDv');

		if (response.type == 'success') {
			showAlert(response);
		} else {
			loadDvTable(response.data);
		}
	});

	document.getElementById("updateDvBtn").addEventListener("click", async () => {
		const response = await get('/Backup/UpdateDv');
		showAlert(response);
	});

	function loadDvTable(items) {
		const dvResponse = document.getElementById("dvResponse");
		dvResponse.classList.remove('is-hidden');

		const table = document.getElementById("dvErrors");
		JSON.parse(items).forEach((item, i) => {
			let row = table.insertRow();
			let index = row.insertCell(0);
			index.innerHTML = ++i;
			let desc = row.insertCell(1);
			desc.innerHTML = item;
		});
	}

	function resetDvTable() {
		const table = document.getElementById("dvErrors");
		table.innerHTML = "";
		const dvResponse = document.getElementById("dvResponse");
		dvResponse.classList.add('is-hidden');
	}
</script>