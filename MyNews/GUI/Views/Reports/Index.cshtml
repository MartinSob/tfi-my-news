<div class="container.is-widescreen my-5">
	<div class="columns is-multiline reports">
		<div class="column is-12 px-5">
			<h1 class="title is-2">
				<i class="fas fa-chart-pie"></i> @(((Dictionary<string,string>)Session["texts"])["reports"])

				<div id="downloadList" class="dropdown">
					<div class="dropdown-trigger">
						<button class="button" aria-haspopup="true" aria-controls="dropdown-menu" onclick="toggleDonwload()">
							<span><i class="fas fa-download mx-1"></i></span>
							<span class="icon is-small">
								<i class="fas fa-angle-down" aria-hidden="true"></i>
							</span>
						</button>
					</div>
					<div class="dropdown-menu" id="dropdown-menu" role="menu">
						<div class="dropdown-content">
							<a href="/Reports/CSV" class="dropdown-item">
								<i class="fas fa-file-csv mr-2"></i> CSV
							</a>
							<a href="/Reports/PDF" class="dropdown-item">
								<i class="far fa-file-pdf mr-2"></i> PDF
							</a>
						</div>
					</div>
				</div>
			</h1>
		</div>

		<div class="column is-6 is-12-mobile">
			<div class="report">
				<h4 class="title is-4">@(((Dictionary<string,string>)Session["texts"])["popular_tags"])</h4>
				<canvas id="popularTags"></canvas>
			</div>
		</div>
		<div class="column is-6 is-12-mobile">
			<div class="report">
				<h4 class="title is-4">@(((Dictionary<string,string>)Session["texts"])["total_reads"])</h4>
				<canvas id="totalReads"></canvas>
			</div>
		</div>
		<div class="column is-6 is-12-mobile">
			<div class="report">
				<h4 class="title is-4">@(((Dictionary<string,string>)Session["texts"])["popular_posts"])</h4>
				<canvas id="popularPosts"></canvas>
			</div>
		</div>
		<div class="column is-6 is-12-mobile">
			<div class="report">
				<h4 class="title is-4">@(((Dictionary<string,string>)Session["texts"])["unpopular_posts"])</h4>
				<canvas id="unpopularPosts"></canvas>
			</div>
		</div>
		<div class="column is-6 is-12-mobile">
			<div class="report">
				<h4 class="title is-4">@(((Dictionary<string,string>)Session["texts"])["popular_employees"])</h4>
				<canvas id="popularEmployees"></canvas>
			</div>
		</div>
		<div class="column is-6 is-12-mobile">
			<div class="report">
				<h4 class="title is-4">@(((Dictionary<string,string>)Session["texts"])["unpopular_employees"])</h4>
				<canvas id="unpopularEmployees"></canvas>
			</div>
		</div>
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', async () => {
		// For some reason Promise.all takes a lot more time
		const popularTags = await get('/Reports/popularTags');
		const totalReads = await get('/Reports/totalReads');
		const popularPosts = await get('/Reports/popularPosts');
		const unpopularPosts = await get('/Reports/unpopularPosts');
		const popularEmployees = await get('/Reports/popularEmployees');
		const unpopularEmployees = await get('/Reports/unpopularEmployees');

		console.log('1️⃣ popularTags', popularTags);
		console.log('2️⃣ totalReads', totalReads);
		console.log('3️⃣ popularPosts', popularPosts);
		console.log('4️⃣ unpopularPosts', unpopularPosts);
		console.log('5️⃣ popularEmployees', popularEmployees);
		console.log('6️⃣ unpopularEmployees', unpopularEmployees);

		const popularTagsCanvas = document.getElementById('popularTags').getContext('2d');
		new Chart(popularTagsCanvas, {
			type: 'bar',
			data: buildPopularTags(popularTags.data)
		});

		const totalReadsCanvas = document.getElementById('totalReads').getContext('2d');
		new Chart(totalReadsCanvas, {
			type: 'line',
			data: buildTotalReads(totalReads.data)
		});

		const popularPostsCanvas = document.getElementById('popularPosts').getContext('2d');
		new Chart(popularPostsCanvas, {
			type: 'bar',
			data: buildPopularPosts(popularPosts.data)
		});

		const unpopularPostsCanvas = document.getElementById('unpopularPosts').getContext('2d');
		new Chart(unpopularPostsCanvas, {
			type: 'bar',
			data: buildPopularPosts(unpopularPosts.data)
		});

		const popularEmployeesCanvas = document.getElementById('popularEmployees').getContext('2d');
		new Chart(popularEmployeesCanvas, {
			type: 'bar',
			data: buildEmployees(popularEmployees.data)
		});

		const unpopularEmployeesCanvas = document.getElementById('unpopularEmployees').getContext('2d');
		new Chart(unpopularEmployeesCanvas, {
			type: 'bar',
			data: buildEmployees(unpopularEmployees.data)
		});
	})

	const buildPopularTags = (pList) => {
		let data = {
			labels: ['@(((Dictionary<string,string>)Session["texts"])["qualification"])',
				'@(((Dictionary<string,string>)Session["texts"])["finished"])',
				'@(((Dictionary<string,string>)Session["texts"])["views"])'],
			datasets: []
		}

		pList.forEach(tag => {
			data.datasets.push({
				label: tag.name,
				data: [tag.qualification, tag.finished, tag.views],
				backgroundColor: [tag.color, tag.color, tag.color]
			});
		})

		return data;
	}

	const buildTotalReads = (pList) => {
		let data = {
			labels: [],
			datasets: [{
				label: '@(((Dictionary<string,string>)Session["texts"])["count"])',
				data: [],
				backgroundColor: [generateRandomColor()],
				fill: true,
			}]
		}

		pList.forEach(p => {
			data.labels.push(p.Key);
			data.datasets[0].data.push(p.Value);
		})

		return data;
	}

	const buildPopularPosts = (pList) => {
		let data = {
			labels: ['@(((Dictionary<string,string>)Session["texts"])["qualification"])',
				'@(((Dictionary<string,string>)Session["texts"])["finished"])',
				'@(((Dictionary<string,string>)Session["texts"])["views"])'],
			datasets: []
		}

		pList.forEach(post => {
			const postColor = generateRandomColor();
			data.datasets.push({
				label: post.title,
				data: [post.qualification, post.finished, post.views],
				backgroundColor: [postColor, postColor, postColor]
			});
		})

		return data;
	}

	const buildEmployees = (pList) => {
		let data = {
			labels: ['@(((Dictionary<string,string>)Session["texts"])["qualification"])',
				'@(((Dictionary<string,string>)Session["texts"])["finished"])',
				'@(((Dictionary<string,string>)Session["texts"])["views"])'],
			datasets: []
		}

		pList.forEach(emp => {
			const employeeColor = generateRandomColor();
			data.datasets.push({
				label: emp.lastname + ', ' + emp.name,
				data: [emp.qualification, emp.finished, emp.views],
				backgroundColor: [employeeColor, employeeColor, employeeColor]
			});
		})

		return data;
	}

	const toggleDonwload = () => {
		document.getElementById("downloadList").classList.toggle("is-active");
	}
</script>
